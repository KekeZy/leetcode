 Given a string, find the length of the longest substring without repeating characters.
 
Examples:

Given "abcabcbb", the answer is "abc", which the length is 3.

Given "bbbbb", the answer is "b", with the length of 1.

Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, 
                                        "pwke" is a subsequence and not a substring.
 
 
public int lengthOfLongestSubstring(String s) {
       if(s.length()==0) return 0;
       HashMap<Character,Integer> map = new HashMap();
       int max = 0;
       for(int i=0,j=0;i<s.length();i++){
           if(map.containsKey(s.charAt(i))){
              j = Math.max(j,map.get(s.charAt(i))+1); //获取重复字符的位置，若前面有两个以上重复字符，取最大索引
           }
           max = Math.max(max,i-j+1);  // j表示重复字符的索引，i表示当前索引
           map.put(s.charAt(i),i);
       }
       return max;
}
整体思路就是找到重复字符的索引
