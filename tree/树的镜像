操作给定的二叉树，将其变换为源二叉树的镜像。


当前结点的左右子树互换，然后递归
public class Solution {
    public void Mirror(TreeNode root) {
       TreeNode tmp = null;
        if (root != null)
            {
            tmp = root.left;
            root.left = root.right;
            root.right = tmp;
            Mirror(root.left);
            Mirror(root.right);
        }
    }
}

//非递归
import java.util.Stack;
public class Solution {
    public void Mirror(TreeNode root) {
        if(root==null) return;
        Stack<TreeNode> stack = new Stack();
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode t = stack.pop();
            if(t.left!=null ||t.right!=null){
                TreeNode temp = t.left;
                t.left = t.right;
                t.right = temp;
            }
            if(t.left!=null){
                stack.push(t.left);
            }
            if(t.right!=null){
                stack.push(t.right);
            }
        }

    }

}
