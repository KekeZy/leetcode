Input: licensePlate = "1s3 PSt", words = ["step", "steps", "stripe", "stepple"]
Output: "steps"
Explanation: The smallest length word that contains the letters "S", "P", "S", and "T".
Note that the answer is not "step", because the letter "s" must occur in the word twice.
Also note that we ignored case for the purposes of comparing whether a letter exists in the word.

licensePlate will be a string with length in range [1, 7].
licensePlate will contain digits, spaces, or letters (uppercase or lowercase).
words will have a length in the range [10, 1000].
Every words[i] will consist of lowercase letters, and have length in range [1, 15].

#暴力。。。。
class Solution:
    def shortestCompletingWord(self, licensePlate, words):
        """
        :type licensePlate: str
        :type words: List[str]
        :rtype: str
        """
        l = list(licensePlate.lower()) #97-122
        res = []
        for i in l:
            if ord(i) <= 122 and ord(i)>=97:
                res.append(i)
        words.sort(key = lambda x:len(x))
        for word in words:
            d = {}
            t = 0
            for i in word:
                if i in d.keys():
                    d[i] = d.get(i)+1
                else:
                    d[i] = 1
            for i in res:
                if d.get(i,0) == 0:
                    break
                else:
                    d[i] = d.get(i)-1
                    t += 1
            if t == len(res):
                return word
        return None
                
            
