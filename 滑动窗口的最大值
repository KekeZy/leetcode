给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。
例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}；


双向队列，每次往队尾添加元素，如果新的数比队尾大，移除当前队尾，插入更大的数（队头一直保持着最大元素，整个队列保持递减的状态）
import java.util.ArrayList;
import java.util.LinkedList;
public class Solution {
    public ArrayList<Integer> maxInWindows(int [] num, int size)
    {
        ArrayList<Integer> res = new ArrayList<Integer>();
        if(num.length==0 || num.length<size || size ==0) return res;
        LinkedList<Integer> index = new LinkedList();
        for(int i=0;i<num.length;i++){
            while(!index.isEmpty()&& num[i]>num[index.peekLast()]){
                index.removeLast();
            }
            index.addLast(i);  //向队尾添加
            if(index.peekFirst()== i-size){   //队头出了滑窗
                index.removeFirst();
            }
            if(i>= size-1){   //第一个窗口的数凑够以后
                res.add(num[index.peekFirst()]);
            }
            
        }
        return res;
    }
}
