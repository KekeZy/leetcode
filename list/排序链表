在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序。

输入: 4->2->1->3
输出: 1->2->3->4


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
# 拆分的地方有问题还
class Solution:
    def sortList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head == None or head.next == None:
            return head
        fast,slow = head,head
        while fast.next != None and fast.next.next != None:
            fast = fast.next.next
            slow = slow.next
        fast = slow
        slow = slow.next
        fast.next = None
        l = self.sortList(fast)
        r = self.sortList(slow)
        
        return self.merge(l,r)
    
    #合并两个排序链表
    def merge(self,left,right):
        if left == None:
            return right
        if right == None:
            return left
        cur,m = None,None
        while left != None and right != None:
            if left.val <= right.val:
                if m == None:
                    m,cur=left,left
                else:
                    cur.next = left
                    cur = cur.next
                left = left.next
            else:
                if m == None:
                    m,cur = right,right
                else:
                    cur.next = right
                    cur = cur.next
                right = right.next
        if left != None:
            cur.next = left
        else:
            cur.next = right
        return m
                    
                    

        
        
        
