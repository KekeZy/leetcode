You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807

两个链表中若有一个为空，赋值为0；
求和之后是否超过10；

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode pre =new ListNode(0);  #注意这里怎么保留头节点，只要指向了头节点所在空间就好
        ListNode head = pre;
        int t = 0;
        while(l1 != null || l2 != null || t != 0){
            ListNode cur = new ListNode(0);
            int sum = ((l1 == null)? 0 : l1.val) + ((l2 == null)? 0 : l2.val) + t;  #这里的简单写法，不需要再用if判断各种情况
            t = sum / 10;
            cur.val = sum % 10;
            pre.next = cur;
            pre = cur;
            
            l1 = (l1 == null)?l1 : l1.next;
            l2 = (l2 == null)?l2 : l2.next;

                
        }
        return head.next;
    }
}
