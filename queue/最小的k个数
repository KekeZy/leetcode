输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,

最大堆保存k个数，每次和堆顶比较，若比堆顶小，堆顶删除，新元素入
import java.util.ArrayList;
import java.util.PriorityQueue;  //优先队列实现大顶堆
import java.util.Comparator;
public class Solution {
    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
        ArrayList<Integer> res = new ArrayList<Integer>();
        if(k == 0 || k > input.length){  //特殊条件
            return res;
        }
        
        //普通的优先队列实现的是小顶堆，初始化时加一个Comparator类之后是大顶堆
        PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(k, new Comparator<Integer>(){  
            @Override
            public int compare(Integer o1, Integer o2){  //大顶堆需要实现一个compare
                return o2.compareTo(o1);
            }
        });
        for(int i=0;i<input.length;i++){
            if(maxHeap.size()!=k){
                 maxHeap.offer(input[i]);
            }else if(input[i] < maxHeap.peek()){
                maxHeap.poll();
                maxHeap.offer(input[i]);
            }
        }
        for(Integer integer : maxHeap){
            res.add(integer);
        }
        return res;
        
        
    }
}
